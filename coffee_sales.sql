/* CREATE DATABASE COFFEE_SALES_DB;
USE COFFEE_SALES_DB;
CREATE TABLE coffee_sales (
    transaction_id INT PRIMARY KEY,
    transaction_date DATE,
    transaction_time TIME,
    transaction_qty INT,
    store_id INT,
    store_location VARCHAR(100),
    product_id INT,
    unit_price DECIMAL(5,2),
    product_category VARCHAR(50),
    product_type VARCHAR(100),
    product_detail VARCHAR(100)
); */
SELECT * FROM COFFEE_SALES;
USE coffee_sales_db;
SELECT COUNT(*) FROM COFFEE_SALES; -- 149116
DESCRIBE COFFEE_SALES;
-- DATA CLEANING --

-- UPDATING THE DATE FORMAT FROM STRING TO DATE --
UPDATE COFFEE_SALES 
SET TRANSACTION_DATE = STR_TO_DATE(TRANSACTION_DATE, '%d-%m-%Y');

UPDATE COFFEE_SALES 
SET TRANSACTION_TIME = STR_TO_DATE(TRANSACTION_DATE, '%H:%i:%s');

-- ALTERING DATA TYPE INTO DATE TYPE --
ALTER TABLE COFFEE_SALES CHANGE COLUMN TRANSACTION_ID_NO TRANSACTION_ID INT;

ALTER TABLE COFFEE_SALES MODIFY COLUMN TRANSACTION_ID INT;

ALTER TABLE COFFEE_SALES MODIFY COLUMN TRANSACTION_DATE DATE;
ALTER TABLE COFFEE_SALES MODIFY COLUMN TRANSACTION_TIME TIME;

DESCRIBE COFFEE_SALES;

-- CALCULATION -- DATA ANALYSIS -- BUSINESS REQUIREMENTS --
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES ; -- 698812
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 1 ; -- JAN MONTH SALES -- 81677
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 2 ; -- FEB MONTH SALES -- 76145
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 3 ; -- MAR MONTH SALES -- 98834
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 4 ; -- APR MONTH SALES -- 118941
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 5 ; -- MAY MONTH SALES -- 156727
SELECT SUM(TRANSACTION_QTY * UNIT_PRICE) AS TOTAL_SALES FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 6 ; -- JUNE MONTH SALES -- 166485
SELECT COUNT(TRANSACTION_ID) AS TOTAL_ORDERS FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 6; -- JUNE - 35352 ORDERS
SELECT SUM(TRANSACTION_QTY) AS TOTAL_QUANTITIES_SOLD FROM COFFEE_SALES WHERE MONTH(TRANSACTION_DATE) = 6; -- JUNE - 50942 QUANTITIES


-- DATA ANALYSIS USING SQL --
-- DELIMITER //
-- CREATE PROCEDURE COFFEE_SALES_ANALYSIS_PROJECT()
-- BEGIN
-- SELECTED MONTH / CURRENT MONTH - MAY = 5 
-- PREVIOUS MONTH APRIL = 4
-- TOTAL SALES KPI -- MONTH OF MONTH DIFF AND MONTH OF MONTH GROWTH
SELECT 
	MONTH(TRANSACTION_DATE) AS MONTH,
    ROUND(SUM(UNIT_PRICE*TRANSACTION_QTY)) AS TOTAL_SALES,
    (SUM(UNIT_PRICE * TRANSACTION_QTY) - 
    LAG (SUM(UNIT_PRICE * TRANSACTION_QTY),1) OVER (ORDER BY MONTH(TRANSACTION_DATE))) /
    LAG (SUM(UNIT_PRICE * TRANSACTION_QTY),1) OVER (ORDER BY MONTH(TRANSACTION_DATE))*100 AS 'MON %'
FROM COFFEE_SALES 
WHERE MONTH(TRANSACTION_DATE) IN (1,2,3,4,5,6)
GROUP BY MONTH(TRANSACTION_DATE)
ORDER BY MONTH(TRANSACTION_DATE);


-- MONTH OF MONTH INCREASE PERCENTAGE OF TOTAL ORDERS BY MONTH --
SELECT 
	MONTH(TRANSACTION_DATE) AS MONTH,
    COUNT(TRANSACTION_ID) AS TOTAL_ORDERS,
	(COUNT(TRANSACTION_ID) - LAG(COUNT(TRANSACTION_ID),1) OVER(ORDER BY MONTH(TRANSACTION_DATE))) /
    LAG(COUNT(TRANSACTION_ID),1) OVER(ORDER BY MONTH(TRANSACTION_DATE)) * 100 AS 'MOM INCREASE %'
    FROM COFFEE_SALES
    WHERE MONTH(TRANSACTION_DATE) IN (1,2,3,4,5,6)
    GROUP BY MONTH(TRANSACTION_DATE)
    ORDER BY MONTH(TRANSACTION_DATE);
    

-- MONTH OF MONTH INCREASE/DECREASE DIFF AND GROWTH
    SELECT 
	MONTH(TRANSACTION_DATE) AS MONTH,
    SUM(TRANSACTION_QTY) AS TOTAL_QUANTITY_SOLD,
	( SUM(TRANSACTION_QTY)- LAG( SUM(TRANSACTION_QTY),1) OVER(ORDER BY MONTH(TRANSACTION_DATE))) /
    LAG(SUM(TRANSACTION_QTY),1) OVER(ORDER BY MONTH(TRANSACTION_DATE)) * 100 AS 'MOM INCREASE %'
    FROM COFFEE_SALES
    WHERE MONTH(TRANSACTION_DATE) IN (1,2,3,4,5,6)
    GROUP BY MONTH(TRANSACTION_DATE)
    ORDER BY MONTH(TRANSACTION_DATE);
 
 -- TOTALS AND CALCULATIONS --
SELECT 
	CONCAT(ROUND(SUM(UNIT_PRICE * TRANSACTION_QTY)/1000,1),'K') AS TOTAL_SALES, 
    CONCAT(ROUND(SUM(TRANSACTION_QTY)/1000,1),'K') AS TOTAL_QTY,
    CONCAT(ROUND(COUNT(TRANSACTION_ID)/1000,1),'K') AS TOTAL_ORDERS
FROM COFFEE_SALES;
-- WHERE TRANSACTION_DATE = '2023-05-18';

-- WEEKENDS - SAT AND SUN
-- WEEKENDS - MON TO FRI 
-- NEED TO BE OPTIMIZED -- ON MY OWN 
SELECT 
	CASE
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 2 THEN 'MONDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 3 THEN 'TUESDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 4 THEN 'WEDNESDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 5 THEN 'THURSDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 6 THEN 'FRIDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 7 THEN 'SATURDAY'
    ELSE 'SUNDAY'
    END AS DAY_TYPE,
    CONCAT(ROUND(SUM(UNIT_PRICE * TRANSACTION_QTY)/1000,0),'K') AS TOTAL_SALES
FROM COFFEE_SALES
WHERE MONTH(TRANSACTION_DATE) = 5 
GROUP BY DAY_TYPE;
/*CASE
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 2 THEN 'MONDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 3 THEN 'TUESDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 4 THEN 'WEDNESDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 5 THEN 'THURSDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 6 THEN 'FRIDAY'
    WHEN DAYOFWEEK(TRANSACTION_DATE) = 7 THEN 'SATURDAY'
    ELSE 'SUNDAY'
    END; */
    
-- TOTAL SALES BY STORE LOCATION MONTH WISE -- EDITABLE MONTH 
SELECT 
	STORE_LOCATION, 
    CONCAT(ROUND(SUM(UNIT_PRICE * TRANSACTION_QTY)/1000,2),'K') AS TOTAL_SALES 
FROM COFFEE_SALES
WHERE MONTH(TRANSACTION_DATE) = 6 -- JUNE -- MONTH EDIT
GROUP BY STORE_LOCATION
ORDER BY TOTAL_SALES DESC;

-- SALES OVER TREND -- AVG SALES DAY BY DAY FOR MONTH USING SUB QUERY --
SELECT CONCAT(ROUND(AVG(TOTAL_SALES)/1000,2),'K') AS AVG_SALES
FROM (SELECT SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES 
	  FROM COFFEE_SALES 
      WHERE MONTH(TRANSACTION_DATE) = 6 -- JUNE -- ANY MONTH EDITABLE
      GROUP BY TRANSACTION_DATE) 
AS INTERNAL_CALCULATION;
      
-- DAY BY DAY TOTAL SALES --      
SELECT DAY(TRANSACTION_DATE) AS DAY_OF_MONTH,
	   SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES
FROM COFFEE_SALES 
WHERE MONTH(TRANSACTION_DATE) = 6
GROUP BY DAY_OF_MONTH
ORDER BY DAY_OF_MONTH;

-- DEFINING THE SALES ABOVE AVG OR BELOW AVG BY USING CASE AND SUB QUERIES -- DAY BY DAY
SELECT DAY_OF_MONTH,
CASE WHEN TOTAL_SALES > AVG_SALES THEN 'ABOVE AVERAGE'
	 WHEN TOTAL_SALES < AVG_SALES THEN 'BELOW AVERGAE'
END AS AVERAGE_STATUS, TOTAL_SALES
FROM (SELECT DAY(TRANSACTION_DATE) AS DAY_OF_MONTH, 
	  SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES,
      AVG(SUM(UNIT_PRICE * TRANSACTION_QTY)) OVER() AS AVG_SALES
      FROM COFFEE_SALES 
      WHERE MONTH(TRANSACTION_DATE) = 6
      GROUP BY DAY_OF_MONTH) AS DAY_WISE_AVG_SALES 
ORDER BY DAY_OF_MONTH;

-- TOP 10 PRODUCTS BY SALES --
SELECT PRODUCT_TYPE AS PRODUCTS, SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES
FROM COFFEE_SALES 
WHERE MONTH(TRANSACTION_DATE) = 5
GROUP BY PRODUCT_TYPE 
ORDER BY TOTAL_SALES DESC 
LIMIT 10;

-- FILTREING PRODUCT CATEGORY --
SELECT PRODUCT_TYPE AS PRODUCTS, SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES
FROM COFFEE_SALES 
WHERE MONTH(TRANSACTION_DATE) = 5 AND PRODUCT_CATEGORY = 'Coffee'
GROUP BY PRODUCT_TYPE 
ORDER BY TOTAL_SALES DESC 
LIMIT 10;

-- HEAT MAP -- DAY WISE AND HOUR WISE SALES 
SELECT SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES,
	   SUM(TRANSACTION_QTY) AS TOTAL_QUANTITY,
       COUNT(*) AS TOTAL_ORDERS
FROM COFFEE_SALES 
WHERE MONTH(TRANSACTION_DATE) = 5 -- MAY MONTH
	  AND DAYOFWEEK(TRANSACTION_DATE) = 1 -- MONDAY = 2
      AND HOUR(TRANSACTION_TIME) = 14; -- HOUR NO 8
      
-- SALES ANALYSIS BY TIME AND HOURS --
SELECT HOUR(TRANSACTION_TIME) AS HOURS,
	   SUM(UNIT_PRICE * TRANSACTION_QTY) AS TOTAL_SALES
FROM COFFEE_SALES
WHERE MONTH(TRANSACTION_DATE) = 5
GROUP BY HOURS
ORDER BY HOURS ASC;

-- END//
DELIMITER ;
CALL COFFEE_SALES_ANALYSIS_PROJECT();
DROP PROCEDURE COFFEE_SALES_ANALYSIS_PROJECT;








